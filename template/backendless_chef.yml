---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Cloudformation Backendless Chef v1.1"
Parameters:
  HostedZone:
    Type: String
    Default: domain.com
    Description: must match a route53 hosted domain/zone

  BackendSSL:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Choose to use backend ssl in addition to ELB ssl

  ChefSubdomain:
    Type: String
    Default: chef-a
    AllowedValues:
      - chef-a
      - chef-b
      - chef-test
    Description: subdomain/prefix for chose hosted zone used for staging

  SSLCertificateARN:
    Type: String
    Default: 'arn:aws:iam::'
    Description: SSL Certficate ARN for SSL Certficate

  SignupDisable:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enter True/False for signup disable (false by default)

  SupportEmail:
    Type: String
    Default: atat@hearst.com
    Description: Enter Support Email for Chef Server (Optional)

  MailHost:
    Type: String
    Default: smtp.mailgun.org
    Description: Enter Mail Host (Optional)

  MailPort:
    Type: String
    Default: '587'
    Description: Enter Port for Mail Host (Optional)

  ChefDir:
    Type: String
    Default: "/root/chef"
    Description: Enter location for client.rb, role.json, & berks functions/creation

  LicenseCount:
    Type: String
    Default: '25'
    Description: Enter how many licenses you have purchased

  DBUser:
    Type: String
    Default: ''
    Description: Enter DB User Name

  DBPassword:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter DB Password

  DBPort:
    Type: String
    Default: '5432'
    Description: Enter DB Port

  DBURL:
    Type: String
    Default: ''
    Description: Enter DB URL or VIP

  ElasticSearchURL:
    Type: String
    Default: ''
    Description: Enter ElasticSearch URL

  UseExistingBucket:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Choose to use an existing bucket from previous installation

  BucketName:
    Type: String
    Default: ''
    Description: Leave Empty! Unless using existing bucket, then enter bucket name here

  ExistingInstall:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Choose only if existing install (i.e.; Previous External DB and Existing S3 Bucket)

  MailCreds:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter Mail Credentials (e.g.; $username:$password)

  NewRelicAppName:
    Type: String
    Default: chef_ha_stack
    Description: Enter New Relic Application Name

  NewRelicLicense:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter New Relic License Key

  NewRelicEnable:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Choose to enable/disable New Relic

  SumologicEnable:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Choose to enable/disable Sumologic

  SumologicAccessID:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter Sumologic Access ID

  SumologicAccessKey:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter Sumologic Access Key

  SumologicPassword:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter Sumologic Password

  S3Dir:
    Type: String
    Default: "/opt/chef-s3"
    Description: Path to mount S3 Bucket to (created during CFN run)

  Cookbook:
    Type: String
    Default: backendless_chef
    Description: Cookbook Name

  CookbookGit:
    Type: String
    Default: https://github.com/HearstAT/cookbook_backendless_chef
    Description: Git Clone URI for Cookbook

  CookbookGitBranch:
    Type: String
    Default: master
    Description: Git Clone Branch

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  SSHSecurityGroup:
    Description: Select Security Group for SSH Access
    Type: AWS::EC2::SecurityGroup::Id
    Default: ''

  UserDataScript:
    Type: String
    Default: https://raw.githubusercontent.com/HearstAT/cfn_backendless_chef/master/userdata.sh
    Description: URL for userdata script to run

  BackupEnable:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Select True/False if you wanted to enable backups

  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
    Default: ''

  AvailabilityZoneA:
    Description: Choose Availability Zone to use
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ''

  AvailabilityZoneB:
    Description: Choose Availability Zone to use
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ''

  AvailabilityZoneC:
    Description: Choose Availability Zone to use
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ''

  InstanceType:
    Type: String
    Default: c4.large
    AllowedValues:
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: Domain Configuration
      Parameters:
        - HostedZone
        - SSLCertificateARN
    -
      Label:
        default: Bucket Configuration
      Parameters:
        - UseExistingBucket
        - BucketName
    -
      Label:
        default: Re-Deploy Configuration (When Using Existing Items)
      Parameters:
        - ExistingInstall
    -
      Label:
        default: Chef Configuration
      Parameters:
        - ChefSubdomain
        - SignupDisable
        - SupportEmail
        - LicenseCount
        - ChefDir
        - S3Dir
        - BackupEnable
    -
      Label:
        default: Database Configuration
      Parameters:
        - DBUser
        - DBPassword
        - DBPort
        - DBURL
    -
      Label:
        default: ElasticSearch Configuration
      Parameters:
        - ElasticSearchURL
    -
      Label:
        default: Mail Configuration (Optional)
      Parameters:
        - MailCreds
        - MailHost
        - MailPort
    -
      Label:
        default: New Relic Configuration (Optional)
      Parameters:
        - NewRelicEnable
        - NewRelicAppName
        - NewRelicLicense
    -
      Label:
        default: Sumologic Configuration (Optional)
      Parameters:
        - SumologicEnable
        - SumologicAccessID
        - SumologicAccessKey
        - SumologicPassword
    -
      Label:
        default: External Build Items
      Parameters:
        - Cookbook
        - CookbookGit
        - CookbookGitBranch
        - UserDataScript
    -
      Label:
        default: Instance & Network Configuration
      Parameters:
        - InstanceType
        - BackendSSL
        - KeyName
        - VPC
        - SSHSecurityGroup
        - AvailabilityZoneA
        - AvailabilityZoneB
        - AvailabilityZoneC
Mappings:
  AWSInstanceType2Arch:
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVM64
    g2.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64

  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0021766a
    us-west-2:
      HVM64: ami-dbfc02bb
    us-west-1:
      HVM64: ami-56f59e36
    eu-west-1:
      HVM64: ami-a11dbfd2
    eu-central-1:
      HVM64: ami-ffaab693
    ap-northeast-1:
      HVM64: ami-20b98c4e
    ap-southeast-1:
      HVM64: ami-06834165
    ap-southeast-2:
      HVM64: ami-7bbee518
    sa-east-1:
      HVM64: ami-08bd3a64
    cn-north-1:
      HVM64: ami-3378b15e

  SubnetConfig:
    PublicA:
      CIDR: 172.33.10.0/24
    PublicB:
      CIDR: 172.33.20.0/24
    PublicC:
      CIDR: 172.33.30.0/24

Conditions:
  CreateChefBucket:
    !Equals: [ !Ref UseExistingBucket, false ]
  BackendSSLCon:
    !Equals: [ !Ref BackendSSL, true ]

Resources:
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZoneA
      CidrBlock: !FindInMap [ SubnetConfig, PublicA, CIDR ]
      Tags:
        - Key: Name
          Value: Chef-Public-Subnet
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !!Ref AvailabilityZoneB
      CidrBlock: !FindInMap [ SubnetConfig, PublicB, CIDR ]
      Tags:
        - Key: Name
          Value: Chef-Public-Subnet
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZoneC
      CidrBlock: !FindInMap [ SubnetConfig, PublicC, CIDR ]
      Tags:
      - Key: Name
        Value: Chef-Public-Subnet
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Network
        Value: Public
  ChefBucket:
    Type: AWS::S3::Bucket
    Condition: CreateChefBucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
  ChefRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      - PolicyName: chef-s3
        PolicyDocument: |
          {
              "Version" : "2012-10-17",
              "Statement":[
              {
                  "Effect":"Allow",
                  "Action": [ "s3:*" ],
                  "Resource": [ { "Fn::Join" : [ "", [ "arn:aws:s3:::",{"Fn::If" : ["CreateChefBucket", {"Ref" : "ChefBucket"}, {"Ref" : "BucketName"}]} ] ] },
                                { "Fn::Join" : [ "", [ "arn:aws:s3:::", {"Fn::If" : ["CreateChefBucket", {"Ref" : "ChefBucket"}, {"Ref" : "BucketName"}]}, "/*" ] ] } ]
              },
              {
                  "Effect":"Allow",
                  "Action": [ "s3:List*" ],
                  "Resource": "arn:aws:s3:::*"
              } ]
            },
            "Roles": [ { "Ref": "ChefRole" } ]
          }
  ChefInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref ChefRole
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Chef Frontend Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
            FromPort: '0'
            ToPort: '65535'
            CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Chef-ELB-SecurityGroup
  PrimaryElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      LBCookieStickinessPolicy:
        - PolicyName: PublicELBCookieStickinessPolicy
          CookieExpirationPeriod: '3600'
      Listeners:
        - InstancePort:
          Fn::If:
            - BackendSSLCon
            - '443'
            - '80'
        LoadBalancerPort: '443'
        InstanceProtocol: HTTPS
        Protocol: HTTPS
        PolicyNames:
          - PublicELBCookieStickinessPolicy
        SSLCertificateId: !Ref SSLCertificateARN
      HealthCheck:
        Target:
          Fn::If:
            - BackendSSLCon
            - HTTPS:443/humans.txt
            - HTTP:80/humans.txt
        HealthyThreshold: '2'
        UnhealthyThreshold: '10'
        Interval: '90'
        Timeout: '60'
      Tags:
        - Key: Name
          Value: Chef-ELB
  SecondaryElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Condition: SecondaryDomainCon
    Properties:
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      LBCookieStickinessPolicy:
        - PolicyName: PublicELBCookieStickinessPolicy
        CookieExpirationPeriod: '3600'
      Listeners:
        - InstancePort:
          Fn::If:
            - BackendSSLCon
            - '443'
            - '80'
        LoadBalancerPort: '443'
        InstanceProtocol: HTTPS
        Protocol: HTTPS
        PolicyNames:
          - PublicELBCookieStickinessPolicy
        SSLCertificateId: !Ref SecondarySSLCertificateARN
      HealthCheck:
        Target:
          Fn::If:
            - BackendSSLCon
            - HTTPS:443/humans.txt
            - HTTP:80/humans.txt
        HealthyThreshold: '2'
        UnhealthyThreshold: '10'
        Interval: '90'
        Timeout: '60'
      Tags:
        - Key: Name
          Value: Chef-Secondary-ELB
  ChefDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName:
        Fn::Join:
          - ''
          - - !Ref HostedZone
            - "."
      Comment: Zone apex alias targeted to myELB LoadBalancer.
      RecordSets:
        - Name:
          Fn::Join:
            - ''
            - - !Ref ChefSubdomain
              - "."
              - !Ref HostedZone
              - "."
        Type: A
        AliasTarget:
          HostedZoneId:
            Fn::GetAtt:
            - PrimaryElasticLoadBalancer
            - CanonicalHostedZoneNameID
          DNSName:
            Fn::GetAtt:
            - PrimaryElasticLoadBalancer
            - CanonicalHostedZoneName
  SecondaryChefDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName:
        Fn::Join:
          - ''
          - !Ref HostedZone
            - "."
      Comment: Zone apex alias targeted to myELB LoadBalancer.
      RecordSets:
        - Name:
          Fn::Join:
            - ''
            - - !Ref ChefSubdomain
              - "-secondary"
              - "."
              - !Ref HostedZone
              - "."
        Type: A
        AliasTarget:
          HostedZoneId:
            Fn::GetAtt:
              - SecondaryElasticLoadBalancer
              - CanonicalHostedZoneNameID
          DNSName:
            Fn::GetAtt:
              - SecondaryElasticLoadBalancer
              - CanonicalHostedZoneName
  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Chef Frontend
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '9090'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '9090'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ChefFrontend-Security-Group

  AutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: SingleDomainCon
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      VPCZoneIdentifier:
      - !Ref SubnetA
      - !Ref SubnetB
      - !Ref SubnetC
      LaunchConfigurationName: !Ref ServerLaunchConfig
      MinSize: '2'
      MaxSize: '3'
      LoadBalancerNames:
      - !Ref PrimaryElasticLoadBalancer
      Tags:
      - Key: Name
        Value: Chef-Scale-Group
        PropagateAtLaunch: 'true'

  ServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - !Ref AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      AssociatePublicIpAddress: 'true'
      InstanceType: !Ref InstanceType
      SecurityGroups:
      - !Ref FrontendSecurityGroup
      - !Ref SSHSecurityGroup
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: '15'
      IamInstanceProfile: !Ref ChefInstanceProfile
      UserData:
        "Fn::Base64": !Sub |
            #!/bin/bash -xev

            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            apt-get update && apt-get -y upgrade
            apt-get install -y wget curl python-setuptools python-pip git

            # Helper function to set wait timer
            error_exit()
            {
              /usr/local/bin/cfn-signal -e 1 -r $1  ${WaitHandle}
              exit 1
             }

            # Install S3FS Dependencies
            sudo apt-get install -y automake autotools-dev g++ git libcurl4-gnutls-dev libfuse-dev libssl-dev libxml2-dev make pkg-config

            # Install S3FS

            # If directory exists, remove it
            if [ -d "/tmp/s3fs-fuse" ]; then
              rm -rf /tmp/s3fs-fuse
            fi

            # If s3fs command doesn't exist, install
            if [ ! -f "/usr/local/bin/s3fs" ]; then
              cd /tmp
              git clone https://github.com/s3fs-fuse/s3fs-fuse.git || error_exit 'Failed to clone s3fs-fuse'
              cd s3fs-fuse
              ./autogen.sh || error_exit 'Failed to run autogen for s3fs-fuse'
              ./configure || error_exit 'Failed to run configure for s3fs-fuse'
              make || error_exit 'Failed to make s3fs-fuse'
              sudo make install || error_exit 'Failed run make-install s3fs-fuse'
            fi

            # Create S3FS Mount Directory
            if [ ! -d "${S3Dir}" ]; then
              mkdir ${S3Dir}
            fi

            # Mount S3 Bucket to Directory
            s3fs -o allow_other -o umask=000 -o ChefRole=${ChefRole} -o endpoint=${AWS::Region} ${BUCKET} ${S3Dir} || error_exit 'Failed to mount s3fs'

            echo -e "${BUCKET} ${S3Dir} fuse.s3fs rw,_netdev,allow_other,umask=000,ChefRole=${ChefRole},endpoint=${AWS::Region},retries=5,multireq_max=5 0 0" >> /etc/fstab || error_exit 'Failed to add mount info to fstab'

            # Sleep to allow s3fs to connect
            sleep 20

            HOSTNAME="chef-fe-$(curl -sS http://169.254.169.254/latest/meta-data/instance-id)"
            FQDN="chef-fe-$(curl -sS http://169.254.169.254/latest/meta-data/instance-id).${HostedZone}"

            if [ ${ExistingInstall} == 'false' ]; then
                if [ ! -f ${S3Dir}/master ]; then
                    echo ${FQDN} > ${S3Dir}/master
                fi
                MASTER=$(cat ${S3Dir}/master)
            else
                MASTER=NULL
            fi

            # make directories
            mkdir -p ${S3Dir}/mail ${S3Dir}/newrelic ${S3Dir}/sumologic ${S3Dir}/db ${S3Dir}/aws ${S3Dir}/certs

            ## AWS Creds
            echo "${ACCESS_KEY}" | tr -d '\n' > ${S3Dir}/aws/access_key
            echo "${SECRET_KEY}" | tr -d '\n' > ${S3Dir}/aws/secret_key

            ## DB Creds
            echo "${DBUser}" | tr -d '\n' > ${S3Dir}/db/username
            echo "${DBPassword}" | tr -d '\n' > ${S3Dir}/db/password

            ## Mail
            echo "${MailHost} ${MailCreds}" | tr -d '\n' > ${S3Dir}/mail/creds

            ## New Relic
            echo "${NewRelicLicense}" | tr -d '\n' > ${S3Dir}/newrelic/license

            ## Sumologic
            echo "${SumologicPassword}" | tr -d '\n' > ${S3Dir}/sumologic/password
            echo "${SumologicAccessID}" | tr -d '\n' > ${S3Dir}/sumologic/access_id
            echo "${SumologicAccessKey}" | tr -d '\n' > ${S3Dir}/sumologic/access_key

            # install chef
            if [ ! -f "/usr/bin/chef-client" ]; then
                curl -L https://omnitruck.chef.io/install.sh | bash || error_exit 'could no install chef'
            fi

            # Install cfn bootstraping tools
            if [ ! -f "/usr/local/bin/cfn-signal" ]; then
                easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz || error_exit "could not install cfn bootstrap tools"
            fi

            if [ ! -d "/etc/chef/ohai/hints" ]; then
                mkdir -p /etc/chef/ohai/hints || error_exit 'Failed to create ohai folder'
            fi

            touch /etc/chef/ohai/hints/ec2.json || error_exit 'Failed to create ec2 hint file'
            touch /etc/chef/ohai/hints/iam.json || error_exit 'Failed to create iam hint file'

            # Create Chef Directory
            mkdir -p ${ChefDir}
            mkdir -p /etc/chef

            # Set hostname
            hostname ${FQDN}  || error_exit 'Failed to set hostname'
            echo  ${FQDN}  > /etc/hostname || error_exit 'Failed to set hostname file'

            cat > '/etc/hosts' << EOF
            127.0.0.1 ${FQDN} ${HOSTNAME} localhost
            ::1 localhost6.localdomain6 localhost6
            EOF


            cat > "${ChefDir}/chef_stack.json" << EOF
            {
                "citadel": {
                    "bucket": "${BUCKET}"
                },
                "${Cookbook}": {
                    "master": "${MASTER}",
                    "backup": {
                        "enable_backups": ${BackupEnable}
                    },
                    "licensecount": "${LicenseCount}",
                    "manage": {
                        "signupdisable": ${SignupDisable},
                        "supportemail": "${SupportEmail}"
                    },
                    "install": {
                        "existing": ${ExistingInstall}
                    },
                    "mail": {
                        "relayhost": "${MailHost}",
                        "relayport": "${MailPort}"
                    },
                    "search": {
                        "url": "${ElasticSearchURL}"
                    },
                    "database": {
                        "port": "${DBPort}",
                        "url": "${DBURL}"
                    },
                    "aws": {
                        "AWS::Region": "${AWS::Region}"
                    },
                    "s3": {
                        "dir": "${S3Dir}"
                    },
                    "ssl": {
                        "enabled": ${BackendSSL}
                    },
                    "newrelic": {
                        "appname": "${NewRelicAppName}",
                        "enable": ${NewRelicEnable}
                    },
                    "sumologic": {
                        "enable": ${SumologicEnable}
                    },
                    "api_fqdn": "chef.${HostedZone}",
                    "prime_domain": "${HostedZone}",
                    "stage_subdomain": "${ChefSubdomain}"
                },
                "run_list": [
                    "recipe[apt-chef]",
                    "recipe[chef-client]",
                    "recipe[${Cookbook}]"
                ]
            }
            EOF

            # Install berks
            if [ ! -f "/opt/chef/embedded/bin/berks" ]; then
                /opt/chef/embedded/bin/gem install berkshelf
            fi

            # Copy json and setup for auto-restore option
            cp ${ChefDir}/chef_stack.json ${ChefDir}/restore.json
            sed -i "s/${Cookbook}/${Cookbook}::restore/g" ${ChefDir}/restore.json

            cat > ${ChefDir}/runner.json <<EOF
            {"run_list":["recipe[apt-chef]","recipe[chef-client]"]}
            EOF

            # Prep for letsencrypt later
            cat > /etc/chef/client.rb <<EOF
            log_level        :info
            log_location     STDOUT
            cookbook_path "${ChefDir}/berks-cookbooks"
            json_attribs "${ChefDir}/runner.json"
            chef_zero.enabled
            local_mode true
            chef_zero.port 8899
            EOF

            # Switch to main directory
            cd ${ChefDir}
            cat > ${ChefDir}/client.rb <<EOF
            log_level        :info
            log_location     STDOUT
            cookbook_path "${ChefDir}/berks-cookbooks"
            json_attribs "${ChefDir}/chef_stack.json"
            chef_zero.enabled
            local_mode true
            chef_zero.port 8899
            EOF

            cat > "${ChefDir}/Berksfile" <<EOF
            source 'https://supermarket.chef.io'
            cookbook "${Cookbook}", git: '${CookbookGit}', branch: '${CookbookGitBranch}'
            EOF

            sudo su -l -c "cd ${ChefDir} && export BERKSHELF_PATH=${ChefDir} && /opt/chef/embedded/bin/berks vendor" || error_exit 'Berks Vendor failed to run'
            sudo su -l -c "chef-client -c "${ChefDir}/client.rb"" || error_exit 'Failed to run chef-client'

            # All is well so signal success and let CF know wait function is complete
            /usr/local/bin/cfn-signal -e 0 -r 'Server setup complete'  ${WaitHandle}

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: ServerLaunchConfig
    Properties:
      Handle:  !Ref WaitHandle
      Timeout: '2300'
Outputs: {}
